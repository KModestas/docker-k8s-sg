name: Deploy containers to Elastic Beanstalk
# automatically deploy app whenever we push to main (just like in a typical vercel app)
# on:
#   push:
#     branches:
#       - main 

# only run when manually triggered
on: 
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # load github repo code onto the VM
      - uses: actions/checkout@v3
      - run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      # build the dev version of react app which contains our tests, then run those tests
      - run: docker build -t rallycoding/react-test -f ./client/Dockerfile.dev ./client
      # if a test fails, the step will fail and the entire workflow will exit (without deploying)
      - run: docker run -e CI=true rallycoding/react-test npm test

      # build prod version of each docker service image
      - run: docker build -t rallycoding/multi-client ./client
      - run: docker build -t rallycoding/multi-nginx ./nginx
      - run: docker build -t rallycoding/multi-server ./server
      - run: docker build -t rallycoding/multi-worker ./worker

      # push each image to Docker Hub (need to update to push to my Docker Hub account)
      - run: docker push rallycoding/multi-client
      - run: docker push rallycoding/multi-nginx
      - run: docker push rallycoding/multi-server
      - run: docker push rallycoding/multi-worker

      # Zips the entire codebase (excluding .git related files) into a deploy.zip file 
      - name: Generate deployment package
        run: zip -r deploy.zip . -x '*.git*'

      - name: Deploy to Elastic Beanstalk
        # elastic beanstalk action from marketplace
        uses: einaregilsson/beanstalk-deploy@v18
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
          aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
          application_name: multi-gh
          environment_name: Multigh-env
          existing_bucket_name: elasticbeanstalk-us-east-1-923445559289
          region: us-east-1
          # use the github commit id as the version for this deployment (ties each deployment to a specific commit)
          version_label: ${{ github.sha }}
          # deploy.zip file we created in the previous step 
          deployment_package: deploy.zip
